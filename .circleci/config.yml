version: 2
jobs:
  decrypt_helm_values:
    docker:
      - image: gocreating/ansible-vault
    environment:
    - PROJECT_NAME: "cubee-api-server"
    steps:
      - checkout
      - run:
          name: Decrypt
          command: |
            echo $ANSIBLE_VAULT_PASSWORD > /root/ansible_vault.key
            ansible-vault decrypt \
              /project/helm-chart/${PROJECT_NAME}/configMap-prod.yaml \
              --output /project/helm-chart/${PROJECT_NAME}/configMap.yaml \
              --vault-password-file=/root/ansible_vault.key
  deploy_to_production:
    docker:
      - image: google/cloud-sdk
    environment:
      - PROJECT_NAME: "cubee-api-server"
      - GOOGLE_PROJECT_ID: "cubee-247317"
      - GOOGLE_COMPUTE_ZONE: "us-west1-a"
      - GOOGLE_CLUSTER_NAME: "cubee-production"
      - DOCKER_REGISTRY_SERVER: "https://index.docker.io/v1/"
    steps:
      - checkout
      - run:
          name: Setup Google Cloud SDK
          command: |
            apt-get install -qq -y gettext
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Docker build and push
          command: |
            TAG=release-$CIRCLE_SHA1
            docker build \
              --build-arg COMMIT_REF=${CIRCLE_SHA1} \
              --build-arg BUILD_DATE=`date -u +”%Y-%m-%dT%H:%M:%SZ”` \
              -t gocreating/cubee-api-server:$TAG .
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push gocreating/cubee-api-server:$TAG
      # - run:
      #     name: Deploy to Kubernetes
      #     command: |
      #       kubectl create secret docker-registry tmp-registry \
      #         --docker-server=$DOCKER_REGISTRY_SERVER \
      #         --docker-username=$DOCKER_USER \
      #         --docker-password=$DOCKER_PASS
      #       envsubst < ${HOME}/project/k8s.yml > ${HOME}/patched_k8s.yml
      #       kubectl apply -f ${HOME}/patched_k8s.yml
      #       kubectl delete secret tmp-registry
      #       kubectl rollout status deployment/${PROJECT_NAME}
      - run:
          name: Get the kubeconfig file
          command: |
            kubectl create secret docker-registry tmp-registry \
              --docker-server=$DOCKER_REGISTRY_SERVER \
              --docker-username=$DOCKER_USER \
              --docker-password=$DOCKER_PASS
            envsubst < ${HOME}/project/helm-chart/${PROJECT_NAME}/values-prod.yaml > ${HOME}/project/helm-chart/${PROJECT_NAME}/values.yaml
            kubectl delete secret tmp-registry
      - run:
          name: install helm
          command: |
            echo "install helm"

            # installs helm with bash commands for easier command line integration
            curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash

      - run:
          name: initialize helm
          command: |
            kubectl apply -f rbac-config.yaml
            # kubectl delete deployment tiller-deploy --namespace=kube-system
            # kubectl delete svc tiller-deploy --namespace=kube-system
            helm init --service-account tiller --history-max 200

      - run:
          name: install chart
          command: |
            # Make sure we get the latest list of charts
            helm repo update
            cd ./helm-chart/${PROJECT_NAME}
            helm upgrade ${PROJECT_NAME} . -f values.yaml --install --force
            helm ls

workflows:
  version: 2
  build_image_and_deploy:
    jobs:
      - decrypt_helm_values
      - deploy_to_production:
          requires:
            - decrypt_helm_values
          filters:
            branches:
              only: master
